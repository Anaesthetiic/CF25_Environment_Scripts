# Import Active Directory Module
Import-Module ActiveDirectory -ErrorAction SilentlyContinue

# Get Current Domain (using your script's method)
$domain = ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).Name
Write-Output "Detected Domain: $domain"

# Function to brute force locate all domain users
function Get-AllDomainUsers {
    param(
        [string]$TargetDomain = $domain
    )
    
    try {
        Write-Host "Starting comprehensive domain user enumeration for: $TargetDomain" -ForegroundColor Green
        
        # Get domain information
        $DomainInfo = Get-ADDomain -Server $TargetDomain
        $DomainDN = $DomainInfo.DistinguishedName
        
        Write-Host "Domain DN: $DomainDN" -ForegroundColor Yellow
        
        # Get all domain users (excluding local accounts)
        Write-Host "Searching entire domain structure for users..." -ForegroundColor Green
        
        # Comprehensive search across all OUs and containers
        $AllUsers = Get-ADUser -Filter * -Server $DomainInfo.PDCEmulator -Properties `
            Name, SamAccountName, DistinguishedName, Enabled, LastLogonDate, 
            WhenCreated, Department, Title, Manager, MemberOf, UserPrincipalName,
            Description, Office, Company
        
        # Filter to ensure only domain users
        $DomainUsers = @()
        foreach ($User in $AllUsers) {
            # Verify this is a domain user by checking DN contains domain DN
            if ($User.DistinguishedName -like "*$DomainDN") {
                # Additional verification - check UPN domain matches
                if ($User.UserPrincipalName -like "*@$($DomainInfo.DNSRoot)" -or 
                    $User.SamAccountName -notlike "*$*") {
                    
                    $DomainUsers += [PSCustomObject]@{
                        Name = $User.Name
                        SamAccountName = $User.SamAccountName
                        UserPrincipalName = $User.UserPrincipalName
                        DistinguishedName = $User.DistinguishedName
                        OU = ($User.DistinguishedName -split ',')[1..100] -join ','
                        Enabled = $User.Enabled
                        LastLogon = $User.LastLogonDate
                        Created = $User.WhenCreated
                        Department = $User.Department
                        Title = $User.Title
                        Groups = ($User.MemberOf | ForEach-Object { (Get-ADGroup $_).Name }) -join "; "
                        Description = $User.Description
                    }
                }
            }
        }
        
        Write-Host "Found $($DomainUsers.Count) domain users" -ForegroundColor Green
        return $DomainUsers
        
    } catch {
        Write-Error "Failed to enumerate domain users: $($_.Exception.Message)"
        return $null
    }
}

# Function to search for specific users from your script context
function Find-ScriptUsers {
    param($AllDomainUsers)
    
    # Users defined in your original script
    $scriptUsers = @{
        "Engineer-User" = @("Monica Torres", "Patrick Peterson", "Diana Gray", "Thomas Ramirez", "Kristen James")
        "Finance-User" = @("Anna Patterson", "Connor Hughes", "Caroline Flores", "Luke Washington", "Janet Butler")
        "HR-User" = @("Brian Martin", "Lisa Lee", "Jason Walker", "Rachel Hall", "Justin Allen")
        "IT-User" = @("Anthony Evans", "Tiffany Edwards", "Jacob Collins", "Amber Stewart", "William Sanchez")
        "Reg-Users" = @("James Anderson", "Sarah Mitchell", "David Rodriguez", "Emily Thompson", "Michael Johnson")
    }
    
    Write-Host "`nLocating users from your original script:" -ForegroundColor Cyan
    
    foreach ($group in $scriptUsers.Keys) {
        Write-Host "`n$group Users:" -ForegroundColor Yellow
        foreach ($userName in $scriptUsers[$group]) {
            $foundUser = $AllDomainUsers | Where-Object { $_.Name -eq $userName }
            if ($foundUser) {
                Write-Host "  ✓ Found: $($foundUser.Name) ($($foundUser.SamAccountName)) in $($foundUser.OU)" -ForegroundColor Green
            } else {
                Write-Host "  ✗ Not Found: $userName" -ForegroundColor Red
            }
        }
    }
}

# Function to export results
function Export-DomainUsers {
    param($Users, [string]$ExportPath = "C:\Temp\DomainUsers.csv")
    
    if ($Users) {
        $Users | Export-Csv -Path $ExportPath -NoTypeInformation
        Write-Host "Results exported to: $ExportPath" -ForegroundColor Green
    }
}

# Main execution
Write-Host "Starting Domain User Discovery Script" -ForegroundColor Magenta
Write-Host "=====================================" -ForegroundColor Magenta

# Get all domain users
$AllDomainUsers = Get-AllDomainUsers

if ($AllDomainUsers) {
    # Display summary
    Write-Host "`nDomain User Summary:" -ForegroundColor Cyan
    Write-Host "Total Domain Users: $($AllDomainUsers.Count)" -ForegroundColor White
    Write-Host "Enabled Users: $(($AllDomainUsers | Where-Object {$_.Enabled}).Count)" -ForegroundColor Green
    Write-Host "Disabled Users: $(($AllDomainUsers | Where-Object {-not $_.Enabled}).Count)" -ForegroundColor Red
    
    # Show users by OU
    Write-Host "`nUsers by Organizational Unit:" -ForegroundColor Cyan
    $AllDomainUsers | Group-Object OU | Sort-Object Count -Descending | ForEach-Object {
        Write-Host "  $($_.Name): $($_.Count) users" -ForegroundColor White
    }
    
    # Find specific users from your script
    Find-ScriptUsers -AllDomainUsers $AllDomainUsers
    
    # Export results
    Export-DomainUsers -Users $AllDomainUsers
    
    # Display first 10 users as sample
    Write-Host "`nSample Users (first 10):" -ForegroundColor Cyan
    $AllDomainUsers | Select-Object -First 10 | Format-Table Name, SamAccountName, Enabled, Department, Title -AutoSize
}

Write-Host "`nScript completed!" -ForegroundColor Magenta
